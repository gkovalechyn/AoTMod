//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
public class GameModEventInterface : AoTModAPI.AoTModAPI{
	private readonly ModMain main;

	public GameModEventInterface (global::ModMain main) {
		this.main = main;
	}
	
	public void onMasterClientChange(){
		try{
			main.onMasterClientChange();
		}catch(System.Exception e){
			main.log(e);
		}
	}

	public override void onPlayerDeath(int id){
		try{
			if (main.getChampionshipManager().isRunning){
				main.getChampionshipManager().handlePlayerDeath(id);
			}

			main.writeChatLogEvent("Player with ID [" + id + "] died.");
		}catch(System.Exception e){
			main.log(e);
		}
	}

    public override void onTitanGetHit(object titan, int killerID, int speed) {
		try{
			this.onTitanGetHit(titan, PhotonView.Find(killerID), speed);
		}catch(System.Exception e){
			main.log(e);
		}
	}

	public void onTitanGetHit(object titan, PhotonView killerView, int speed){
		try{
			main.getTHController().handleDamage(titan, killerView, speed);

			if (main.getChampionshipManager().isInMatch()){
				main.getChampionshipManager().handleKill((TITAN) titan, killerView.ownerId, speed);
			}
		}catch(System.Exception e){
			main.log(e);
		}
	}

    public override void onLevelReload() {
		try{
#if DEBUG
			main.debug("GameModEventInterface::onLevelReload - Recieved level reload");
#endif
			main.refindGameManager();

			main.getSpawnController().onLevelReload();

            //ModMain.instance.getModMainThread().updateInternalPlayerProperties();
		}catch(System.Exception e){
			main.log(e);
		}
	}

    public override void onLateUpdate() {
		try{
			main.getTaskManager().runLateUpdateTasks();
		}catch(System.Exception e){
			main.log(e);
		}
	}

    public override void playerKilledTitan(int damage) {
        ModMain.instance.getModMainThread().addKillTitanInfo(damage);
    }

    public override void onJoinedRoom() {
        try {
            main.onRoomEnter();
            main.getSpawnController().recalculateSpawnPositions();
            main.getModMainThread().getDestroyList().Clear();
            main.getModMainThread().resetStatsOnRoomJoin();
        } catch (System.Exception e) {
            main.log(e);
        }
    }

    public override void onChatReceived(string message, string sender, object photonMessageInfo) {
        try {
            main.chatRecieved(sender, message, (PhotonMessageInfo) photonMessageInfo);
        } catch (System.Exception e) {
            main.log(e);
        }
    }

    public override void onPlayerJoin(int playerId) {
        PhotonPlayer player = PhotonPlayer.Find(playerId);
        try {
            main.writeChatLogEvent("Player [#" + player.ID + "] " + player.customProperties[PhotonPlayerProperty.name] + " joined");

            if (PhotonNetwork.isMasterClient) {
                string name = (string)player.customProperties[PhotonPlayerProperty.name];
                string stripped;

                if (name == null) {
                    return;
                }

                stripped = ModMain.stripColorCodes(name).Trim();

                if (main.getModMainThread().isBanned(stripped)) {
                    main.writeChatLogEvent("Banned player \"" + stripped + "\" was kicked.");
                    PhotonNetwork.CloseConnection(player);
                }
            }
        } catch (System.Exception e) {
            main.log(e);
        }
    }

    public override void onPlayerLeave(int id) {
        PhotonPlayer player = PhotonPlayer.Find(id);

        try {
            main.writeChatLogEvent("Player [#" + player.ID + "] " + player.customProperties[PhotonPlayerProperty.name] + " left");
        } catch (System.Exception e) {
            main.log(e);
        }
    }

    public override void log(string message) {
        this.main.log(message);
    }

    public override void logToConsole(string message) {
        this.main.logToConsole(message);
    }

    public override void debug(string message) {
        this.main.debug(message);
    }

    public override void banName(string playerName, int banType) {
        MainModThread.BanType type = this.main.getModMainThread().getBanTypeByInt(banType);
        this.main.getModMainThread().banName(playerName, type);
    }

    public override void onMasterClientChanged(int newMasterClientID) {
        this.main.onMasterClientChange();
    }

    public override void sendToPlayer(string message) {
        this.main.sendToPlayer(message);
    }

    public override void log(Exception e) {
        this.main.log(e);
    }

    public override bool containsDifferentProperty(int playerId) {
        PhotonPlayer player = PhotonPlayer.Find(playerId);
        if (player != null) {
            return this.main.containsDifferentProperty(player);
        } else {
            return false;
        }
    }

    public override void playerDied() {
        if (this.main.isHidden()) {
            ExitGames.Client.Photon.Hashtable table = new ExitGames.Client.Photon.Hashtable();
            table[PhotonPlayerProperty.dead] = null;
            PhotonNetwork.player.SetCustomProperties(table);
        }

        this.main.getModMainThread().playerDied();
    }

    public override string generateStatsString(int kills, int damage) {
        return this.main.generateStatsString(kills, damage);
    }

    public override object spawnTitanHook(int rate, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, bool punk) {
        return null;//this.main.getSpawnController().spawnTitanHook(rate, position, rotation, punk);
    }

    public override string getPlayerDisplayName() {
        return this.main.getNameManager().getPlayerDisplayName();
    }

    public override string getPlayerGuild() {
        return this.main.getNameManager().getPlayerGuild();
    }

    public override bool isGodModeEnabled() {
        return this.main.isGodMode();
    }

    public override void parseChat(string message) {
        this.main.parseChat(message);
    }

    public override string getCommandInHistory(int index) {
        return this.main.getCommandManager().getCommandInHistory(index);
    }

    public override void crashPlayer(int id) {
        CrashCmd.doCrash3(id);
    }

    public override string generateRandomName() {
        return this.main.getNameChanger().generateRandomName();
    }

    public override bool isToAddProperties() {
        return main.isToAddProperties();
    }

    public override void onLevelWasLoaded(object LevelInfo) {
        if (LevelInfo != null) {
            this.main.getSpawnController().onLevelLoad();
        }
    }

    public override bool isFakingAsOtherMod() {
        return this.main.isFakingAsOtherMod();
    }
}


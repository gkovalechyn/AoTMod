//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
public class LagCmd : ICommand{
	private string[] help = {
		"/lag <on|off> - Turn on/off",
		"/lag threads <num> - Set the number of threads",
		"/lag interval <interval>(in miliseconds) - Set the interval",
		"/lag targets - Show targets",
		"/lag target add <ID> - Add that player to the target list",
		"/lag target remove <index> - Remove the player at that index from the target list",
		"/lag mode <All|Others|List> - Changes who to target.",
		"/lag burst <amount> - How many RPC's should be called per thread.",
		"/lag info - Show information"
	};
	public bool cmd (string[] args, FengGameManagerMKII gm){
		if (args.Length == 0){
			ModMain.instance.sendToPlayer(this.help);
			return true;
		}

		if (args[0].Equals("threads", StringComparison.OrdinalIgnoreCase)){
			if (ModMain.instance.getLagController().isRunning){
				ModMain.instance.sendToPlayer("Cannot change the amount of threads while running.");
				return true;
			}else {
				ModMain.instance.getLagController().setThreadCount(int.Parse(args[1]));
				return true;
			}
		}else if (args[0].Equals("interval", StringComparison.OrdinalIgnoreCase)){
			ModMain.instance.getLagController().setInterval(int.Parse(args[1]));
			return true;
		}else if (args[0].Equals("info", StringComparison.OrdinalIgnoreCase)){
			this.sendInfo();
			return true;
		}else if (args[0].Equals("burst", StringComparison.OrdinalIgnoreCase)){
			ModMain.instance.getLagController().setBurstAmount(int.Parse(args[1]));
			return true;
		}else if (args[0].Equals("mode", StringComparison.OrdinalIgnoreCase)){
			if (args[1].Equals("all", StringComparison.OrdinalIgnoreCase)){
				ModMain.instance.getLagController().setMode(LagController.LagMode.ALL);
			}else if (args[1].Equals("others", StringComparison.OrdinalIgnoreCase)){
				ModMain.instance.getLagController().setMode(LagController.LagMode.OTHERS);
			}else if (args[1].Equals("list", StringComparison.OrdinalIgnoreCase)){
				ModMain.instance.getLagController().setMode(LagController.LagMode.LIST);
			}else {
				ModMain.instance.sendToPlayer(this.help);
			}
			return true;
		}else if (args[0].Equals("targets", StringComparison.OrdinalIgnoreCase)){
			int i = 0;
			string result = "Targets:\n";

			foreach(PhotonPlayer player in ModMain.instance.getLagController().getTargets()){
				result += (i++) + "- #" + player.ID + " " + player.customProperties[PhotonPlayerProperty.name];
			}

			ModMain.instance.sendToPlayer(result);
			return true;
		}else if (args[0].Equals("target", StringComparison.OrdinalIgnoreCase)){
			if (args[1].Equals("add", StringComparison.OrdinalIgnoreCase)){
				ModMain.instance.getLagController().addPlayer(int.Parse(args[2]));
				return true;
			}else if (args[1].Equals("remove", StringComparison.OrdinalIgnoreCase)){
				ModMain.instance.getLagController().removeAt(int.Parse(args[2]));
				return true;
			}else{
				ModMain.instance.sendToPlayer(this.help);
				return true;
			}
		}else if (args[0].Equals("on", StringComparison.OrdinalIgnoreCase)){
			if (!ModMain.instance.getLagController().isRunning){
				ModMain.instance.getLagController().start();
				return true;
			}else{
				ModMain.instance.sendToPlayer("Already running.");
				return true;
			}
		}else if (args[0].Equals("off", StringComparison.OrdinalIgnoreCase)){
			if (ModMain.instance.getLagController().isRunning){
				ModMain.instance.getLagController().stop();
				return true;
			}else{
				ModMain.instance.sendToPlayer("Not running.");
				return true;
			}
		}else {
			ModMain.instance.sendToPlayer(this.help);
			return true;
		}
	}

	private void sendInfo(){
		LagController lag = ModMain.instance.getLagController();
		string message = "Is running: " + lag.isRunning + "\n" +
			"Threads: " + lag.getThreadCount() + "\n" +
			"Interval(ms): " + lag.getInterval() + "\n" +
			"Burst: " + lag.getBurstAmount() + "\n" + 
			"Mode: " + lag.getMode();

		if (lag.getMode() == LagController.LagMode.LIST){
			message +="\nTargets:\n";
			int i = 0;
			foreach(PhotonPlayer player in lag.getTargets()){
				message += (i++) + "- [#" + player.ID + "]" + player.customProperties[PhotonPlayerProperty.name] + "\n";
			}
		}

		ModMain.instance.sendToPlayer(message);
	}

    public string getDescriptionString() {
        return "(Experimental) Makes other players lag, causing them to DC.";
    }
}


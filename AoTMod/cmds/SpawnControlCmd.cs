//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.18444
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

public class SpawnControlCmd : ICommand{
	//sc size <min> <max>
	//sc ratio <normal> <aberrant> <jumper> <crawler> <punk>
	//sc customSpawns <on|off>
	//sc info
	private string[] help = new string[]{
        "/sc mode <FIXED|WAVE> - Changed between fixed-spawns and wave modes.",
        "/sc wave maxWave <newMaxWave> - Changes the maximum wave.",
        "/sc wave function <waveFunction> - Changes the function used int the wave calculation.", 
        "/sc fixed count <newCount> - Changes the amount of titans in the FIXED mode.",
		"/sc info",
		"/sc size <min> <max>",
		"/sc customRatios <on|off>",
		"/sc ratio <normal> <aberrant> <jumper> <crawler> <punk>",
		"/sc maxTitans <newMax>",
		"/sc custom <WaveType> <params>",
		"/sc custom ratio <WaveNumber> <Amount> <N> <A> <J> <C> <P>(Values between 0 and 1)",
		"/sc custom specific <WaveNumber> <Titan1> <Titan2> ... <TitanN> (Example:" +
		"/sc custom specific 5 1P 2C 3N 3N)#1 Punk, 2 crawlers, etc."

	};
	public bool cmd (string[] args, FengGameManagerMKII gm){
		if (args.Length == 0){
			ModMain.instance.sendToPlayer(this.help);
			return true;
		}

        if (args[0].Equals("mode", StringComparison.OrdinalIgnoreCase)) {
            if (args[1].Equals("FIXED", StringComparison.OrdinalIgnoreCase)) {
                ModMain.instance.getSpawnController().setMode(SpawnControllerMode.FIXED_SPAWN);
                ModMain.instance.sendToPlayer("Changed spawn mode to: " + SpawnControllerMode.FIXED_SPAWN);
            }else if (args[1].Equals("WAVE", StringComparison.OrdinalIgnoreCase)) {
                ModMain.instance.getSpawnController().setMode(SpawnControllerMode.WAVES);
                ModMain.instance.sendToPlayer("Changed spawn mode to: " + SpawnControllerMode.WAVES);
            } else {
                ModMain.instance.sendToPlayer("Mode not recognized: " + args[1]);
            }
            return true;
        }else if (args[0].Equals("wave", StringComparison.OrdinalIgnoreCase)) {
            if (args[1].Equals("maxWave", StringComparison.OrdinalIgnoreCase)) {
                ModMain.instance.getSpawnController().setMaxWave(int.Parse(args[2]));
            } else if (args[1].Equals("function", StringComparison.OrdinalIgnoreCase)) {
                string[] temp = new string[args.Length - 2];
                Array.Copy(args, 2, temp, 0, temp.Length);
                ModMain.instance.getSpawnController().setWaveFunction(string.Join(" ", temp));
            } else {
                ModMain.instance.sendToPlayer("Argument not recognized: " + args[1]);
            }
            return true;
        } else if (args[0].Equals("fixed", StringComparison.OrdinalIgnoreCase)) {
            if (args[1].Equals("count", StringComparison.OrdinalIgnoreCase)) {
                ModMain.instance.getSpawnController().setFixedSpawnCount(int.Parse(args[2]));
            } else {
                ModMain.instance.sendToPlayer("Argument not recognized: " + args[1]);
            }
            return true;
        } else if (args[0].Equals("info", StringComparison.OrdinalIgnoreCase)) {
            this.sendInfo();
            return true;
        } else if (args[0].Equals("customRatios", StringComparison.OrdinalIgnoreCase)) {
            ModMain.instance.getSpawnController().setCustomRatiosEnabled(args[1].Equals("on", StringComparison.OrdinalIgnoreCase));
            return true;
        } else if(args[0].Equals("size", StringComparison.OrdinalIgnoreCase)){
			if (args.Length < 3){
				ModMain.instance.sendToPlayer(this.help[2]);
				return true;
			}
			float min = float.Parse(args[1]);
			float max = float.Parse(args[2]);
			ModMain.instance.getSpawnController().setMinSize(min);
			ModMain.instance.getSpawnController().setMaxSize(max);
			return true;
		}else if (args[0].Equals("ratio", StringComparison.OrdinalIgnoreCase)){
			if (args.Length < 6){
				ModMain.instance.sendToPlayer(this.help[3]);
				return true;
			}
			this.handleRatios(args);
			return true;
		}else if (args[0].Equals("maxTitans", StringComparison.OrdinalIgnoreCase)){
			ModMain.instance.getSpawnController().setMaxAllowedTitans(int.Parse(args[1]));
			return true;
		}else if (args[0].Equals("custom", StringComparison.OrdinalIgnoreCase)){
			this.doCustomArgument(args);
			return true;
		}else{
			ModMain.instance.sendToPlayer("Unknown argument: " + args[0]);
			return true;
		}
	}
	//sc ratio <1> <2> <3> <4> <5>
	private void handleRatios(string[] args){
		float[] arr = new float[5];
        float total = 0f;

		for(int i = 0; i < arr.Length; i++){
			arr[i] = float.Parse(args[i + 1]);
		}

        //Normalize the input
		foreach(float f in arr){
            total += f;
		}

        for (int i = 0; i < arr.Length; i++) {
            arr[i] = arr[i] / total;
        }

		ModMain.instance.getSpawnController().setProbabilities(arr);
	}

	private void sendInfo(){
		SpawnController controller = ModMain.instance.getSpawnController();
		float[] p = controller.getSpawnProbabilities();

        string[] messages = new string[]{
            "Custom ratios enabled: " + controller.isCustomRatiosEnabled(),
            "Spawn mode: " + controller.getMode(),
            "WAVE - Maximum Wave: " + controller.getMaxWave(),
            "Wave function: " + controller.getWaveFunction(), 
            "FIXED - Titan spawn count: " + controller.getFixedSpawnCount(),
			"Spawn sizes (Min|Max): " + controller.getMinSize() + " | " + controller.getMaxSize(),
			"Spawn ratios (N|A|J|C|P): " + p[0] + " | " + p[1] + " | " + p[2]+ " | " + p[3]+ " | " + p[4],
			"Maximum allowed titans: " + controller.getMaxAllowedTitans(),
			"Titans to spawn: " + controller.getTitansToSpawn(),
			"Custom waves: " + this.generateCustomWaveString()
		};

		ModMain.instance.sendToPlayer(messages);
	}
	private string generateCustomWaveString(){
        string res = "";
		foreach(KeyValuePair<int, SpawnController.WaveSpawnInfo> pair in ModMain.instance.getSpawnController().getCustomWaves()){
            SpawnController.WaveSpawnInfo info = pair.Value;
			res += "[" + pair.Key + "]{";

			if (info.spawnByRatio){
				res += info.nRatio + "N " +
						info.aRatio + "A " +
						info.jRatio + "J " +
						info.cRatio + "C " +
						info.pRatio + "P";

			}else{
				foreach (string s in info.toSpawn){
					res += s + "||";
				}
			}
			res += "}\n";
		}

		return res;
	}
	//sc custom <ratio|specific> <wave> <params>
	private void doCustomArgument(string[] args){
		if (args[1].Equals("ratio", StringComparison.OrdinalIgnoreCase)){
			ModMain.instance.getSpawnController().setCustomWaveRatio(
				int.Parse(args[2]),
				int.Parse(args[3]),
				float.Parse(args[4]),
				float.Parse(args[5]),
				float.Parse(args[6]),
				float.Parse(args[7]),
				float.Parse(args[8])
				);
		}else if (args[1].Equals("specific", StringComparison.OrdinalIgnoreCase)){
			int wave = int.Parse(args[2]);
			string[] titans = new string[args.Length - 3];
			Array.Copy(args, 3, titans, 0, titans.Length);
			ModMain.instance.getSpawnController().setCustomWave(wave, titans.Length, titans);
		}else{
			ModMain.instance.sendToPlayer("Unknown argument[1]: " + args[1]);
		}
	}

    public string getDescriptionString() {
        return "Controls the spawning of titans of the SpawnController.";
    }
}

